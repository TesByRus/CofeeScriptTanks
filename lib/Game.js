// Generated by CoffeeScript 1.6.3
(function() {
  var Bullet, Game, Player, bulTemp, checkIntersect, drawArea, inRad, interval, keyP1RotLeft, keyP1RotRight, keyP2RotLeft, keyP2RotRight, lendir, player1, player2, players, restart, rotatePlayer, showLife;

  keyP1RotRight = false;

  keyP1RotLeft = false;

  keyP2RotRight = false;

  keyP2RotLeft = false;

  inRad = function(num) {
    return num * Math.PI / 180;
  };

  Player = (function() {
    function Player(x, y, alpha, color) {
      this.x = x;
      this.y = y;
      this.alpha = alpha;
      this.color = color;
      this.x = x;
      this.y = y;
      this.alpha = alpha;
      this.dirX = Math.cos(inRad(alpha));
      this.dirY = Math.sin(inRad(alpha));
      this.color = color;
      this.bullets = [];
      this.XP = 3;
      this.speed = 0.8;
    }

    Player.prototype.drawPlayer = function() {
      var canvas, ctx;
      canvas = document.getElementById("canvas");
      ctx = canvas.getContext('2d');
      ctx.save();
      ctx.translate(this.x, this.y);
      ctx.rotate(inRad(this.alpha));
      ctx.fillStyle = this.color;
      ctx.fillRect(-10, -10, 20, 20);
      ctx.fillStyle = "#000";
      ctx.fillRect(10, -0.5, 2, 2);
      return ctx.restore();
    };

    Player.prototype.rotateMe = function(angle) {
      this.alpha += angle;
      this.dirX = Math.cos(inRad(this.alpha));
      return this.dirY = Math.sin(inRad(this.alpha));
    };

    Player.prototype.moveMe = function() {
      var i, _i, _len, _ref, _results;
      this.x += this.dirX * this.speed;
      this.y += this.dirY * this.speed;
      _ref = this.bullets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        i.moveBullet();
        _results.push(i.drawBullet());
      }
      return _results;
    };

    return Player;

  })();

  rotatePlayer = function() {
    if (keyP1RotRight) {
      player1.rotateMe(1.5);
    } else if (keyP1RotLeft) {
      player1.rotateMe(-1.5);
    }
    if (keyP2RotRight) {
      return player2.rotateMe(1.5);
    } else if (keyP2RotLeft) {
      return player2.rotateMe(-1.5);
    }
  };

  player1 = new Player(100, 100, 0, "#FF0000");

  player2 = new Player(700, 500, 180, "#0000FF");

  players = [player1, player2];

  lendir = function(x, y) {
    return Math.sqrt(x * x + y * y);
  };

  Bullet = (function() {
    function Bullet(x, y, dirX, dirY) {
      this.x = x;
      this.y = y;
      this.dirX = dirX;
      this.dirY = dirY;
      this.x = x;
      this.y = y;
      this.dirX = dirX / lendir(this.dirX, this.dirY);
      this.dirY = dirY / lendir(this.dirX, this.dirY);
    }

    Bullet.prototype.drawBullet = function() {
      var canvas, ctx;
      canvas = document.getElementById('canvas');
      if (canvas.getContext) {
        ctx = canvas.getContext('2d');
        ctx.strokeStyle = "#000";
        ctx.fillStyle = "#FF0000";
        ctx.beginPath();
        ctx.arc(this.x, this.y, 1, 0, Math.PI * 2, true);
        ctx.closePath();
        ctx.stroke();
        return ctx.fill();
      }
    };

    Bullet.prototype.moveBullet = function() {
      var l;
      l = lendir(this.dirX, this.dirY);
      this.x += 2 * this.dirX / l;
      return this.y += 2 * this.dirY / l;
    };

    return Bullet;

  })();

  checkIntersect = function() {
    var i, ind, p, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _ref, _ref1, _ref2, _results;
    for (_i = 0, _len = players.length; _i < _len; _i++) {
      p = players[_i];
      ind = [];
      _ref = p.bullets;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        i = _ref[_j];
        if (i.x < 0 || i.x > 800) {
          ind.push(p.bullets.indexOf(i));
        } else if (i.y < 0 || i.y > 600) {
          ind.push(p.bullets.indexOf(i));
        }
      }
      for (_k = 0, _len2 = ind.length; _k < _len2; _k++) {
        i = ind[_k];
        p.bullets.splice(i, 1);
      }
    }
    if (player1.x + player1.dirX <= 0 || player1.x + player1.dirX >= 800) {
      player1.dirX = 0;
    }
    if (player1.y + player1.dirY <= 0 || player1.y + player1.dirY >= 600) {
      player1.dirY = 0;
    }
    if (player2.x + player2.dirX <= 0 || player2.x + player2.dirX >= 800) {
      player2.dirX = 0;
    }
    if (player2.y + player2.dirY <= 0 || player2.y + player2.dirY >= 600) {
      player2.dirY = 0;
    }
    ind = [];
    _ref1 = player1.bullets;
    for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
      i = _ref1[_l];
      if (i.x >= player2.x - 10 && i.x <= player2.x + 10 && i.y >= player2.y - 10 && i.y <= player2.y + 10) {
        player2.XP -= 1;
        player2.color = "#FFDE00";
        ind.push(player1.bullets.indexOf(i));
      }
    }
    for (_m = 0, _len4 = ind.length; _m < _len4; _m++) {
      i = ind[_m];
      player1.bullets.splice(i, 1);
    }
    ind = [];
    _ref2 = player2.bullets;
    for (_n = 0, _len5 = _ref2.length; _n < _len5; _n++) {
      i = _ref2[_n];
      if (i.x >= player1.x - 10 && i.x <= player1.x + 10 && i.y >= player1.y - 10 && i.y <= player1.y + 10) {
        player1.XP -= 1;
        player1.color = "#FFDE00";
        ind.push(player2.bullets.indexOf(i));
      }
    }
    _results = [];
    for (_o = 0, _len6 = ind.length; _o < _len6; _o++) {
      i = ind[_o];
      _results.push(player2.bullets.splice(i, 1));
    }
    return _results;
  };

  interval = function() {};

  this.StartGame = function() {
    var startButton;
    startButton = document.getElementById("startButton");
    startButton.disabled = true;
    return interval = setInterval(Game, 1);
  };

  restart = function() {
    var startButton;
    player1 = new Player(100, 100, 0, "#FF0000");
    player2 = new Player(700, 500, 180, "#0000FF");
    startButton = document.getElementById("startButton");
    startButton.disabled = false;
    drawStartArea();
    keyP1RotRight = false;
    keyP1RotLeft = false;
    keyP2RotRight = false;
    return keyP2RotLeft = false;
  };

  this.StopGame = function() {
    return clearInterval(interval);
  };

  bulTemp = 99;

  Game = function() {
    var b1, b2;
    drawArea();
    rotatePlayer();
    bulTemp += 1;
    if (bulTemp === 100) {
      bulTemp = 0;
      b1 = new Bullet(player1.x, player1.y, player1.dirX, player1.dirY);
      b2 = new Bullet(player2.x, player2.y, player2.dirX, player2.dirY);
      player1.bullets.push(b1);
      player2.bullets.push(b2);
      player1.color = "#FF0000";
      player2.color = "#0000FF";
    }
    checkIntersect();
    player1.moveMe();
    player1.drawPlayer();
    player2.moveMe();
    player2.drawPlayer();
    return showLife();
  };

  showLife = function() {
    document.getElementById("p1").innerHTML = player1.XP.toString() + "xp";
    document.getElementById("p2").innerHTML = player2.XP.toString() + "xp";
    if (player1.XP === 0 && player2.XP === 0) {
      StopGame();
      alert("DRAW!");
      restart();
    }
    if (player1.XP === 0) {
      StopGame();
      alert("Player2 WIN!");
      return restart();
    } else if (player2.XP === 0) {
      StopGame();
      alert("Player1 WIN!");
      return restart();
    }
  };

  drawArea = function() {
    var canvas, ctx;
    canvas = document.getElementById("canvas");
    if (canvas.getContext) {
      ctx = canvas.getContext('2d');
      ctx.beginPath();
      ctx.clearRect(0, 0, 800, 600);
      ctx.fillStyle = "ABFCFF";
      ctx.fillRect(0, 0, 800, 600);
      ctx.closePath();
      ctx.stroke();
      return ctx.fill();
    }
  };

  this.drawStartArea = function() {
    drawArea();
    showLife();
    player1.drawPlayer();
    return player2.drawPlayer();
  };

  this.keyDown = function(keyCode) {
    if (parseInt(keyCode) === 68) {
      keyP1RotRight = true;
    } else if (parseInt(keyCode) === 65) {
      keyP1RotLeft = true;
    }
    if (parseInt(keyCode) === 39) {
      return keyP2RotRight = true;
    } else if (parseInt(keyCode) === 37) {
      return keyP2RotLeft = true;
    }
  };

  this.keyUp = function(keyCode) {
    if (parseInt(keyCode) === 68) {
      keyP1RotRight = false;
    } else if (parseInt(keyCode) === 65) {
      keyP1RotLeft = false;
    }
    if (parseInt(keyCode) === 39) {
      return keyP2RotRight = false;
    } else if (parseInt(keyCode) === 37) {
      return keyP2RotLeft = false;
    }
  };

}).call(this);
